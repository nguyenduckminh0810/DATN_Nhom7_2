import { ref, reactive, computed } from 'vue'
import shippingService from '@/services/shippingService'

// üéØ MOCK DATA - D·ªØ li·ªáu m·∫´u v·ªõi FULL 63 t·ªânh th√†nh Vi·ªát Nam
const MOCK_DATA = {
  provinces: [
    { ProvinceID: 269, ProvinceName: 'L√†o Cai', Code: '10' },
    { ProvinceID: 271, ProvinceName: 'ƒêi·ªán Bi√™n', Code: '11' },
    { ProvinceID: 273, ProvinceName: 'Lai Ch√¢u', Code: '12' },
    { ProvinceID: 275, ProvinceName: 'S∆°n La', Code: '14' },
    { ProvinceID: 277, ProvinceName: 'Y√™n B√°i', Code: '15' },
    { ProvinceID: 279, ProvinceName: 'Ho√† B√¨nh', Code: '17' },
    { ProvinceID: 281, ProvinceName: 'Th√°i Nguy√™n', Code: '19' },
    { ProvinceID: 283, ProvinceName: 'L·∫°ng S∆°n', Code: '20' },
    { ProvinceID: 285, ProvinceName: 'Qu·∫£ng Ninh', Code: '22' },
    { ProvinceID: 287, ProvinceName: 'B·∫Øc Giang', Code: '24' },
    { ProvinceID: 289, ProvinceName: 'Ph√∫ Th·ªç', Code: '25' },
    { ProvinceID: 291, ProvinceName: 'Vƒ©nh Ph√∫c', Code: '26' },
    { ProvinceID: 293, ProvinceName: 'B·∫Øc Ninh', Code: '27' },
    { ProvinceID: 295, ProvinceName: 'H·∫£i D∆∞∆°ng', Code: '30' },
    { ProvinceID: 201, ProvinceName: 'H√† N·ªôi', Code: '01' },
    { ProvinceID: 297, ProvinceName: 'H·∫£i Ph√≤ng', Code: '31' },
    { ProvinceID: 299, ProvinceName: 'H∆∞ng Y√™n', Code: '33' },
    { ProvinceID: 301, ProvinceName: 'Th√°i B√¨nh', Code: '34' },
    { ProvinceID: 303, ProvinceName: 'H√† Nam', Code: '35' },
    { ProvinceID: 305, ProvinceName: 'Nam ƒê·ªãnh', Code: '36' },
    { ProvinceID: 307, ProvinceName: 'Ninh B√¨nh', Code: '37' },
    { ProvinceID: 309, ProvinceName: 'Thanh H√≥a', Code: '38' },
    { ProvinceID: 311, ProvinceName: 'Ngh·ªá An', Code: '40' },
    { ProvinceID: 313, ProvinceName: 'H√† Tƒ©nh', Code: '42' },
    { ProvinceID: 315, ProvinceName: 'Qu·∫£ng B√¨nh', Code: '44' },
    { ProvinceID: 317, ProvinceName: 'Qu·∫£ng Tr·ªã', Code: '45' },
    { ProvinceID: 319, ProvinceName: 'Th·ª´a Thi√™n Hu·∫ø', Code: '46' },
    { ProvinceID: 203, ProvinceName: 'ƒê√† N·∫µng', Code: '48' },
    { ProvinceID: 321, ProvinceName: 'Qu·∫£ng Nam', Code: '49' },
    { ProvinceID: 323, ProvinceName: 'Qu·∫£ng Ng√£i', Code: '51' },
    { ProvinceID: 325, ProvinceName: 'B√¨nh ƒê·ªãnh', Code: '52' },
    { ProvinceID: 327, ProvinceName: 'Ph√∫ Y√™n', Code: '54' },
    { ProvinceID: 329, ProvinceName: 'Kh√°nh H√≤a', Code: '56' },
    { ProvinceID: 331, ProvinceName: 'Ninh Thu·∫≠n', Code: '58' },
    { ProvinceID: 333, ProvinceName: 'B√¨nh Thu·∫≠n', Code: '60' },
    { ProvinceID: 335, ProvinceName: 'Kon Tum', Code: '62' },
    { ProvinceID: 337, ProvinceName: 'Gia Lai', Code: '64' },
    { ProvinceID: 339, ProvinceName: 'ƒê·∫Øk L·∫Øk', Code: '66' },
    { ProvinceID: 341, ProvinceName: 'ƒê·∫Øk N√¥ng', Code: '67' },
    { ProvinceID: 343, ProvinceName: 'L√¢m ƒê·ªìng', Code: '68' },
    { ProvinceID: 345, ProvinceName: 'B√¨nh Ph∆∞·ªõc', Code: '70' },
    { ProvinceID: 347, ProvinceName: 'T√¢y Ninh', Code: '72' },
    { ProvinceID: 349, ProvinceName: 'B√¨nh D∆∞∆°ng', Code: '74' },
    { ProvinceID: 351, ProvinceName: 'ƒê·ªìng Nai', Code: '75' },
    { ProvinceID: 353, ProvinceName: 'B√† R·ªãa - V≈©ng T√†u', Code: '77' },
    { ProvinceID: 202, ProvinceName: 'TP. H·ªì Ch√≠ Minh', Code: '79' },
    { ProvinceID: 355, ProvinceName: 'Long An', Code: '80' },
    { ProvinceID: 357, ProvinceName: 'Ti·ªÅn Giang', Code: '82' },
    { ProvinceID: 359, ProvinceName: 'B·∫øn Tre', Code: '83' },
    { ProvinceID: 361, ProvinceName: 'Tr√† Vinh', Code: '84' },
    { ProvinceID: 363, ProvinceName: 'Vƒ©nh Long', Code: '86' },
    { ProvinceID: 365, ProvinceName: 'ƒê·ªìng Th√°p', Code: '87' },
    { ProvinceID: 367, ProvinceName: 'An Giang', Code: '89' },
    { ProvinceID: 369, ProvinceName: 'Ki√™n Giang', Code: '91' },
    { ProvinceID: 204, ProvinceName: 'C·∫ßn Th∆°', Code: '92' },
    { ProvinceID: 371, ProvinceName: 'H·∫≠u Giang', Code: '93' },
    { ProvinceID: 373, ProvinceName: 'S√≥c TrƒÉng', Code: '94' },
    { ProvinceID: 375, ProvinceName: 'B·∫°c Li√™u', Code: '95' },
    { ProvinceID: 377, ProvinceName: 'C√† Mau', Code: '96' },
    { ProvinceID: 380, ProvinceName: 'H√† Giang', Code: '02' },
    { ProvinceID: 382, ProvinceName: 'Cao B·∫±ng', Code: '04' },
    { ProvinceID: 384, ProvinceName: 'B·∫Øc K·∫°n', Code: '06' },
    { ProvinceID: 386, ProvinceName: 'Tuy√™n Quang', Code: '08' },
  ],
  districts: {
    202: [ // TP.HCM
      { DistrictID: 1542, DistrictName: 'Qu·∫≠n 1', Code: '1542' },
      { DistrictID: 1443, DistrictName: 'Qu·∫≠n 3', Code: '1443' },
      { DistrictID: 1462, DistrictName: 'Qu·∫≠n 10', Code: '1462' },
      { DistrictID: 3695, DistrictName: 'Th·ªß ƒê·ª©c', Code: '3695' },
      { DistrictID: 1444, DistrictName: 'Qu·∫≠n 4', Code: '1444' },
      { DistrictID: 1446, DistrictName: 'Qu·∫≠n 5', Code: '1446' },
      { DistrictID: 1447, DistrictName: 'Qu·∫≠n 6', Code: '1447' },
      { DistrictID: 1449, DistrictName: 'Qu·∫≠n 7', Code: '1449' },
      { DistrictID: 1450, DistrictName: 'Qu·∫≠n 8', Code: '1450' },
      { DistrictID: 1452, DistrictName: 'Qu·∫≠n 11', Code: '1452' },
      { DistrictID: 1453, DistrictName: 'Qu·∫≠n 12', Code: '1453' },
      { DistrictID: 1454, DistrictName: 'Qu·∫≠n B√¨nh T√¢n', Code: '1454' },
      { DistrictID: 1455, DistrictName: 'Qu·∫≠n B√¨nh Th·∫°nh', Code: '1455' },
      { DistrictID: 1456, DistrictName: 'Qu·∫≠n G√≤ V·∫•p', Code: '1456' },
      { DistrictID: 1457, DistrictName: 'Qu·∫≠n Ph√∫ Nhu·∫≠n', Code: '1457' },
      { DistrictID: 1458, DistrictName: 'Qu·∫≠n T√¢n B√¨nh', Code: '1458' },
      { DistrictID: 1459, DistrictName: 'Qu·∫≠n T√¢n Ph√∫', Code: '1459' },
    ],
    201: [ // H√† N·ªôi
      { DistrictID: 1482, DistrictName: 'Ba ƒê√¨nh', Code: '1482' },
      { DistrictID: 1451, DistrictName: 'Ho√†n Ki·∫øm', Code: '1451' },
      { DistrictID: 1452, DistrictName: 'ƒê·ªëng ƒêa', Code: '1452' },
      { DistrictID: 1488, DistrictName: 'Hai B√† Tr∆∞ng', Code: '1488' },
      { DistrictID: 1490, DistrictName: 'Ho√†ng Mai', Code: '1490' },
      { DistrictID: 1491, DistrictName: 'Thanh Xu√¢n', Code: '1491' },
      { DistrictID: 1533, DistrictName: 'Long Bi√™n', Code: '1533' },
      { DistrictID: 1534, DistrictName: 'Nam T·ª´ Li√™m', Code: '1534' },
      { DistrictID: 1535, DistrictName: 'B·∫Øc T·ª´ Li√™m', Code: '1535' },
      { DistrictID: 1542, DistrictName: 'C·∫ßu Gi·∫•y', Code: '1542' },
    ],
    203: [ // ƒê√† N·∫µng
      { DistrictID: 1580, DistrictName: 'H·∫£i Ch√¢u', Code: '1580' },
      { DistrictID: 3440, DistrictName: 'Thanh Kh√™', Code: '3440' },
      { DistrictID: 1581, DistrictName: 'S∆°n Tr√†', Code: '1581' },
      { DistrictID: 1582, DistrictName: 'Ng≈© H√†nh S∆°n', Code: '1582' },
      { DistrictID: 1583, DistrictName: 'Li√™n Chi·ªÉu', Code: '1583' },
      { DistrictID: 1584, DistrictName: 'C·∫©m L·ªá', Code: '1584' },
    ],
    204: [ // C·∫ßn Th∆°
      { DistrictID: 1711, DistrictName: 'Ninh Ki·ªÅu', Code: '1711' },
      { DistrictID: 1712, DistrictName: '√î M√¥n', Code: '1712' },
      { DistrictID: 1713, DistrictName: 'B√¨nh Th·ªßy', Code: '1713' },
      { DistrictID: 1714, DistrictName: 'C√°i RƒÉng', Code: '1714' },
      { DistrictID: 1715, DistrictName: 'Th·ªët N·ªët', Code: '1715' },
    ],
    297: [ // H·∫£i Ph√≤ng - FULL 15 qu·∫≠n/huy·ªán
      { DistrictID: 1643, DistrictName: 'Qu·∫≠n H·ªìng B√†ng', Code: '1643' },
      { DistrictID: 1644, DistrictName: 'Qu·∫≠n Ng√¥ Quy·ªÅn', Code: '1644' },
      { DistrictID: 1645, DistrictName: 'Qu·∫≠n L√™ Ch√¢n', Code: '1645' },
      { DistrictID: 1646, DistrictName: 'Qu·∫≠n H·∫£i An', Code: '1646' },
      { DistrictID: 1647, DistrictName: 'Qu·∫≠n Ki·∫øn An', Code: '1647' },
      { DistrictID: 1648, DistrictName: 'Qu·∫≠n ƒê·ªì S∆°n', Code: '1648' },
      { DistrictID: 1649, DistrictName: 'Qu·∫≠n D∆∞∆°ng Kinh', Code: '1649' },
      { DistrictID: 1650, DistrictName: 'Huy·ªán An D∆∞∆°ng', Code: '1650' },
      { DistrictID: 1651, DistrictName: 'Huy·ªán An L√£o', Code: '1651' },
      { DistrictID: 1652, DistrictName: 'Huy·ªán Ki·∫øn Th·ª•y', Code: '1652' },
      { DistrictID: 1653, DistrictName: 'Huy·ªán Ti√™n L√£ng', Code: '1653' },
      { DistrictID: 1654, DistrictName: 'Huy·ªán Vƒ©nh B·∫£o', Code: '1654' },
      { DistrictID: 1655, DistrictName: 'Huy·ªán C√°t H·∫£i', Code: '1655' },
      { DistrictID: 1656, DistrictName: 'Huy·ªán B·∫°ch Long Vƒ©', Code: '1656' },
      { DistrictID: 1657, DistrictName: 'Huy·ªán Th·ªßy Nguy√™n', Code: '1657' },
    ],
    349: [ // B√¨nh D∆∞∆°ng
      { DistrictID: 1573, DistrictName: 'Th·ªß D·∫ßu M·ªôt', Code: '1573' },
      { DistrictID: 1574, DistrictName: 'Dƒ© An', Code: '1574' },
      { DistrictID: 1575, DistrictName: 'Thu·∫≠n An', Code: '1575' },
      { DistrictID: 1576, DistrictName: 'B·∫øn C√°t', Code: '1576' },
      { DistrictID: 1577, DistrictName: 'T√¢n Uy√™n', Code: '1577' },
    ],
    351: [ // ƒê·ªìng Nai
      { DistrictID: 1563, DistrictName: 'Bi√™n H√≤a', Code: '1563' },
      { DistrictID: 1564, DistrictName: 'Long Kh√°nh', Code: '1564' },
      { DistrictID: 1565, DistrictName: 'Nh∆°n Tr·∫°ch', Code: '1565' },
      { DistrictID: 1566, DistrictName: 'Tr·∫£ng Bom', Code: '1566' },
    ],
    353: [ // B√† R·ªãa - V≈©ng T√†u
      { DistrictID: 1555, DistrictName: 'V≈©ng T√†u', Code: '1555' },
      { DistrictID: 1556, DistrictName: 'B√† R·ªãa', Code: '1556' },
      { DistrictID: 1557, DistrictName: 'Ch√¢u ƒê·ª©c', Code: '1557' },
      { DistrictID: 1558, DistrictName: 'Xuy√™n M·ªôc', Code: '1558' },
    ],
    285: [ // Qu·∫£ng Ninh
      { DistrictID: 1617, DistrictName: 'H·∫° Long', Code: '1617' },
      { DistrictID: 1618, DistrictName: 'M√≥ng C√°i', Code: '1618' },
      { DistrictID: 1619, DistrictName: 'C·∫©m Ph·∫£', Code: '1619' },
      { DistrictID: 1620, DistrictName: 'U√¥ng B√≠', Code: '1620' },
      { DistrictID: 1621, DistrictName: 'Qu·∫£ng Y√™n', Code: '1621' },
    ],
    329: [ // Kh√°nh H√≤a
      { DistrictID: 1569, DistrictName: 'Nha Trang', Code: '1569' },
      { DistrictID: 1570, DistrictName: 'Cam Ranh', Code: '1570' },
      { DistrictID: 1571, DistrictName: 'Ninh H√≤a', Code: '1571' },
      { DistrictID: 1572, DistrictName: 'V·∫°n Ninh', Code: '1572' },
    ],
  },
  wards: {
    1542: [ // Qu·∫≠n 1 - HCM
      { WardCode: '21211', WardName: 'Ph∆∞·ªùng B·∫øn Ngh√©' },
      { WardCode: '21212', WardName: 'Ph∆∞·ªùng B·∫øn Th√†nh' },
      { WardCode: '21213', WardName: 'Ph∆∞·ªùng Nguy·ªÖn Th√°i B√¨nh' },
      { WardCode: '21214', WardName: 'Ph∆∞·ªùng Ph·∫°m Ng≈© L√£o' },
      { WardCode: '21215', WardName: 'Ph∆∞·ªùng C√¥ Giang' },
    ],
    1443: [ // Qu·∫≠n 3 - HCM
      { WardCode: '20308', WardName: 'Ph∆∞·ªùng 01' },
      { WardCode: '20309', WardName: 'Ph∆∞·ªùng 02' },
      { WardCode: '20310', WardName: 'Ph∆∞·ªùng 03' },
      { WardCode: '20311', WardName: 'Ph∆∞·ªùng 04' },
    ],
    3695: [ // Th·ªß ƒê·ª©c - HCM
      { WardCode: '90737', WardName: 'Ph∆∞·ªùng Linh Xu√¢n' },
      { WardCode: '90738', WardName: 'Ph∆∞·ªùng B√¨nh Chi·ªÉu' },
      { WardCode: '90739', WardName: 'Ph∆∞·ªùng Linh Trung' },
      { WardCode: '90740', WardName: 'Ph∆∞·ªùng Tam B√¨nh' },
    ],
    1482: [ // Ba ƒê√¨nh - H√† N·ªôi
      { WardCode: '11007', WardName: 'Ph∆∞·ªùng Ph√∫c X√°' },
      { WardCode: '11008', WardName: 'Ph∆∞·ªùng Tr√∫c B·∫°ch' },
      { WardCode: '11009', WardName: 'Ph∆∞·ªùng Vƒ©nh Ph√∫c' },
      { WardCode: '11010', WardName: 'Ph∆∞·ªùng C·ªëng V·ªã' },
    ],
    1451: [ // Ho√†n Ki·∫øm - H√† N·ªôi
      { WardCode: '10101', WardName: 'Ph∆∞·ªùng H√†ng B·∫°c' },
      { WardCode: '10102', WardName: 'Ph∆∞·ªùng H√†ng Gai' },
      { WardCode: '10103', WardName: 'Ph∆∞·ªùng H√†ng Tr·ªëng' },
      { WardCode: '10104', WardName: 'Ph∆∞·ªùng H√†ng B√¥ng' },
    ],
    1580: [ // H·∫£i Ch√¢u - ƒê√† N·∫µng
      { WardCode: '550501', WardName: 'Ph∆∞·ªùng Th·∫°ch Thang' },
      { WardCode: '550502', WardName: 'Ph∆∞·ªùng H·∫£i Ch√¢u 1' },
      { WardCode: '550503', WardName: 'Ph∆∞·ªùng H·∫£i Ch√¢u 2' },
      { WardCode: '550504', WardName: 'Ph∆∞·ªùng Ph∆∞·ªõc Ninh' },
    ],
    1711: [ // Ninh Ki·ªÅu - C·∫ßn Th∆°
      { WardCode: '92101', WardName: 'Ph∆∞·ªùng C√°i Kh·∫ø' },
      { WardCode: '92102', WardName: 'Ph∆∞·ªùng An H√≤a' },
      { WardCode: '92103', WardName: 'Ph∆∞·ªùng Th·ªõi B√¨nh' },
      { WardCode: '92104', WardName: 'Ph∆∞·ªùng An Nghi·ªáp' },
    ],
    1643: [ // H·ªìng B√†ng - H·∫£i Ph√≤ng
      { WardCode: '31101', WardName: 'Ph∆∞·ªùng Qu√°n Toan' },
      { WardCode: '31102', WardName: 'Ph∆∞·ªùng H√πng V∆∞∆°ng' },
      { WardCode: '31103', WardName: 'Ph∆∞·ªùng S·ªü D·∫ßu' },
      { WardCode: '31104', WardName: 'Ph∆∞·ªùng Th∆∞·ª£ng L√Ω' },
    ],
    1644: [ // Ng√¥ Quy·ªÅn - H·∫£i Ph√≤ng
      { WardCode: '31201', WardName: 'Ph∆∞·ªùng M√°y Chai' },
      { WardCode: '31202', WardName: 'Ph∆∞·ªùng M√°y T∆°' },
      { WardCode: '31203', WardName: 'Ph∆∞·ªùng V·∫°n M·ªπ' },
      { WardCode: '31204', WardName: 'Ph∆∞·ªùng C·∫ßu Tre' },
    ],
    1645: [ // L√™ Ch√¢n - H·∫£i Ph√≤ng
      { WardCode: '31301', WardName: 'Ph∆∞·ªùng C√°t D√†i' },
      { WardCode: '31302', WardName: 'Ph∆∞·ªùng An Bi√™n' },
      { WardCode: '31303', WardName: 'Ph∆∞·ªùng Lam S∆°n' },
      { WardCode: '31304', WardName: 'Ph∆∞·ªùng An D∆∞∆°ng' },
    ],
    1646: [ // H·∫£i An - H·∫£i Ph√≤ng
      { WardCode: '31401', WardName: 'Ph∆∞·ªùng ƒê√¥ng H·∫£i 1' },
      { WardCode: '31402', WardName: 'Ph∆∞·ªùng ƒê√¥ng H·∫£i 2' },
      { WardCode: '31403', WardName: 'Ph∆∞·ªùng ƒê·∫±ng L√¢m' },
      { WardCode: '31404', WardName: 'Ph∆∞·ªùng Nam H·∫£i' },
    ],
    1650: [ // Huy·ªán An D∆∞∆°ng - H·∫£i Ph√≤ng
      { WardCode: '31801', WardName: 'Th·ªã tr·∫•n An D∆∞∆°ng' },
      { WardCode: '31802', WardName: 'X√£ L√™ Thi·ªán' },
      { WardCode: '31803', WardName: 'X√£ ƒê·∫°i B·∫£n' },
      { WardCode: '31804', WardName: 'X√£ An Ho√†' },
      { WardCode: '31805', WardName: 'X√£ H·ªìng Phong' },
      { WardCode: '31806', WardName: 'X√£ ƒê·∫∑ng C∆∞∆°ng' },
      { WardCode: '31807', WardName: 'X√£ ƒê·ªìng Th√°i' },
      { WardCode: '31808', WardName: 'X√£ Qu·ªëc Tu·∫•n' },
      { WardCode: '31809', WardName: 'X√£ An ƒê·ªìng' },
      { WardCode: '31810', WardName: 'X√£ H·ªìng Th√°i' },
    ],
    1651: [ // Huy·ªán An L√£o - H·∫£i Ph√≤ng
      { WardCode: '31901', WardName: 'Th·ªã tr·∫•n An L√£o' },
      { WardCode: '31902', WardName: 'X√£ B√°t Trang' },
      { WardCode: '31903', WardName: 'X√£ Tr∆∞·ªùng Th·ªç' },
      { WardCode: '31904', WardName: 'X√£ Tr∆∞·ªùng Th√†nh' },
    ],
    1652: [ // Huy·ªán Ki·∫øn Th·ª•y - H·∫£i Ph√≤ng
      { WardCode: '32001', WardName: 'Th·ªã tr·∫•n N√∫i ƒê√®o' },
      { WardCode: '32002', WardName: 'X√£ ƒê√¥ng Ph∆∞∆°ng' },
      { WardCode: '32003', WardName: 'X√£ Thu·∫≠n Thi√™n' },
      { WardCode: '32004', WardName: 'X√£ Ki·∫øn Qu·ªëc' },
    ],
    1653: [ // Huy·ªán Ti√™n L√£ng - H·∫£i Ph√≤ng
      { WardCode: '32101', WardName: 'Th·ªã tr·∫•n Ti√™n L√£ng' },
      { WardCode: '32102', WardName: 'X√£ ƒê·∫°i Th·∫Øng' },
      { WardCode: '32103', WardName: 'X√£ Ti√™n C∆∞·ªùng' },
      { WardCode: '32104', WardName: 'X√£ T·ª± C∆∞·ªùng' },
    ],
    1654: [ // Huy·ªán Vƒ©nh B·∫£o - H·∫£i Ph√≤ng
      { WardCode: '32201', WardName: 'Th·ªã tr·∫•n Vƒ©nh B·∫£o' },
      { WardCode: '32202', WardName: 'X√£ D≈©ng Ti·∫øn' },
      { WardCode: '32203', WardName: 'X√£ Giang Bi√™n' },
      { WardCode: '32204', WardName: 'X√£ Trung L·∫≠p' },
    ],
    1657: [ // Huy·ªán Th·ªßy Nguy√™n - H·∫£i Ph√≤ng
      { WardCode: '32501', WardName: 'Th·ªã tr·∫•n N√∫i ƒê·ªëi' },
      { WardCode: '32502', WardName: 'X√£ Ng≈© Ph√∫c' },
      { WardCode: '32503', WardName: 'X√£ K√™nh Giang' },
      { WardCode: '32504', WardName: 'X√£ Li√™n Kh√™' },
    ],
    1573: [ // Th·ªß D·∫ßu M·ªôt - B√¨nh D∆∞∆°ng
      { WardCode: '74101', WardName: 'Ph∆∞·ªùng Ph√∫ H√≤a' },
      { WardCode: '74102', WardName: 'Ph∆∞·ªùng Ph√∫ Th·ªç' },
      { WardCode: '74103', WardName: 'Ph∆∞·ªùng Ph√∫ L·ª£i' },
      { WardCode: '74104', WardName: 'Ph∆∞·ªùng Ph√∫ C∆∞·ªùng' },
    ],
    1563: [ // Bi√™n H√≤a - ƒê·ªìng Nai
      { WardCode: '75101', WardName: 'Ph∆∞·ªùng Tr·∫£ng D√†i' },
      { WardCode: '75102', WardName: 'Ph∆∞·ªùng T√¢n Phong' },
      { WardCode: '75103', WardName: 'Ph∆∞·ªùng T√¢n Bi√™n' },
      { WardCode: '75104', WardName: 'Ph∆∞·ªùng H·ªë Nai' },
    ],
    1555: [ // V≈©ng T√†u - BRVT
      { WardCode: '77101', WardName: 'Ph∆∞·ªùng 1' },
      { WardCode: '77102', WardName: 'Ph∆∞·ªùng 2' },
      { WardCode: '77103', WardName: 'Ph∆∞·ªùng 3' },
      { WardCode: '77104', WardName: 'Ph∆∞·ªùng Th·∫Øng Tam' },
    ],
    1617: [ // H·∫° Long - Qu·∫£ng Ninh
      { WardCode: '22101', WardName: 'Ph∆∞·ªùng B√£i Ch√°y' },
      { WardCode: '22102', WardName: 'Ph∆∞·ªùng H·ªìng Gai' },
      { WardCode: '22103', WardName: 'Ph∆∞·ªùng H√† Kh√°nh' },
      { WardCode: '22104', WardName: 'Ph∆∞·ªùng H√† Phong' },
    ],
    1569: [ // Nha Trang - Kh√°nh H√≤a
      { WardCode: '56101', WardName: 'Ph∆∞·ªùng Vƒ©nh H√≤a' },
      { WardCode: '56102', WardName: 'Ph∆∞·ªùng Vƒ©nh Ph∆∞·ªõc' },
      { WardCode: '56103', WardName: 'Ph∆∞·ªùng Ph∆∞·ªõc Long' },
      { WardCode: '56104', WardName: 'Ph∆∞·ªùng Ph∆∞·ªõc Ti·∫øn' },
    ],
  }
}

// Flag ƒë·ªÉ b·∫≠t/t·∫Øt mock mode
const USE_MOCK_DATA = true // ‚ö†Ô∏è B·∫¨T L·∫†I - Backend ch∆∞a s·∫µn s√†ng

/**
 * Composable ƒë·ªÉ x·ª≠ l√Ω shipping GHN trong Vue components
 * @returns {Object} Shipping state v√† methods
 */
export function useShipping() {
  // State
  const provinces = ref([])
  const districts = ref([])
  const wards = ref([])
  const services = ref([])

  const selectedProvince = ref(null)
  const selectedDistrict = ref(null)
  const selectedWard = ref(null)
  const selectedService = ref(null)

  const shippingFee = ref(0)
  const expectedDeliveryTime = ref(null)

  const loading = reactive({
    provinces: false,
    districts: false,
    wards: false,
    services: false,
    calculating: false,
  })

  const errors = reactive({
    provinces: null,
    districts: null,
    wards: null,
    services: null,
    calculating: null,
  })

  // Computed
  const hasSelectedAddress = computed(() => {
    return selectedProvince.value && selectedDistrict.value && selectedWard.value
  })

  const canCalculateFee = computed(() => {
    return hasSelectedAddress.value && selectedService.value
  })

  const formattedShippingFee = computed(() => {
    return shippingService.formatCurrency(shippingFee.value)
  })

  // Methods
  /**
   * Load danh s√°ch t·ªânh/th√†nh ph·ªë
   */
  const loadProvinces = async () => {
    loading.provinces = true
    errors.provinces = null

    try {
      // üéØ MOCK MODE: S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
      if (USE_MOCK_DATA) {
        await new Promise(resolve => setTimeout(resolve, 500)) // Gi·∫£ l·∫≠p network delay
        provinces.value = MOCK_DATA.provinces
        console.log('‚úÖ [MOCK] Loaded provinces:', provinces.value.length)
        return
      }

      // Real API call
      provinces.value = await shippingService.getProvinces()
    } catch (error) {
      errors.provinces = error.message
      console.error('Error loading provinces:', error)
    } finally {
      loading.provinces = false
    }
  }

  /**
   * Load danh s√°ch qu·∫≠n/huy·ªán
   * @param {number} provinceId - ID c·ªßa t·ªânh/th√†nh ph·ªë
   */
  const loadDistricts = async (provinceId) => {
    if (!provinceId) {
      districts.value = []
      return
    }

    loading.districts = true
    errors.districts = null

    // Reset dependent selections
    selectedDistrict.value = null
    selectedWard.value = null
    wards.value = []

    try {
      // üéØ MOCK MODE: S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
      if (USE_MOCK_DATA) {
        await new Promise(resolve => setTimeout(resolve, 400))
        districts.value = MOCK_DATA.districts[provinceId] || []
        console.log('‚úÖ [MOCK] Loaded districts for province', provinceId, ':', districts.value.length)
        return
      }

      // Real API call
      districts.value = await shippingService.getDistricts(provinceId)
    } catch (error) {
      errors.districts = error.message
      console.error('Error loading districts:', error)
    } finally {
      loading.districts = false
    }
  }

  /**
   * Load danh s√°ch ph∆∞·ªùng/x√£
   * @param {number} districtId - ID c·ªßa qu·∫≠n/huy·ªán
   */
  const loadWards = async (districtId) => {
    if (!districtId) {
      wards.value = []
      return
    }

    loading.wards = true
    errors.wards = null

    // Reset dependent selections
    selectedWard.value = null

    try {
      // üéØ MOCK MODE: S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
      if (USE_MOCK_DATA) {
        await new Promise(resolve => setTimeout(resolve, 300))
        wards.value = MOCK_DATA.wards[districtId] || []
        console.log('‚úÖ [MOCK] Loaded wards for district', districtId, ':', wards.value.length)
        return
      }

      // Real API call
      wards.value = await shippingService.getWards(districtId)
    } catch (error) {
      errors.wards = error.message
      console.error('Error loading wards:', error)
    } finally {
      loading.wards = false
    }
  }

  /**
   * Load danh s√°ch d·ªãch v·ª• v·∫≠n chuy·ªÉn
   * @param {number} toDistrictId - ID qu·∫≠n/huy·ªán ƒë√≠ch
   */
  const loadServices = async (toDistrictId) => {
    if (!toDistrictId) {
      services.value = []
      return
    }

    loading.services = true
    errors.services = null

    try {
      services.value = await shippingService.getServices(toDistrictId)

      // Auto select default service if available
      if (services.value.length > 0 && !selectedService.value) {
        const expressService = services.value.find(
          (s) => s.service_id === shippingService.SERVICE_IDS.EXPRESS,
        )
        selectedService.value = expressService
          ? expressService.service_id
          : services.value[0].service_id
      }
    } catch (error) {
      errors.services = error.message
      console.error('Error loading services:', error)
    } finally {
      loading.services = false
    }
  }

  /**
   * T√≠nh ph√≠ v·∫≠n chuy·ªÉn
   * @param {Object} params - Th√¥ng tin t√≠nh ph√≠
   * @param {number} params.totalWeight - T·ªïng kh·ªëi l∆∞·ª£ng (gram)
   * @param {number} params.insuranceValue - Gi√° tr·ªã ƒë∆°n h√†ng (VNƒê)
   * @param {number} [params.serviceId] - M√£ d·ªãch v·ª• (optional, s·∫Ω d√πng selectedService n·∫øu kh√¥ng c√≥)
   */
  const calculateShippingFee = async (params) => {
    const { totalWeight, insuranceValue, serviceId } = params

    if (!selectedDistrict.value || !selectedWard.value) {
      errors.calculating = 'Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ giao h√†ng'
      return null
    }

    const effectiveServiceId = serviceId || selectedService.value || 53320

    loading.calculating = true
    errors.calculating = null

    try {
      // üéØ MOCK MODE: T√≠nh ph√≠ ship gi·∫£ l·∫≠p v·ªõi c√¥ng th·ª©c linh ƒë·ªông
      if (USE_MOCK_DATA) {
        await new Promise(resolve => setTimeout(resolve, 600))
        
        // üí∞ C√îNG TH·ª®C PH√ç SHIP LINH ƒê·ªòNG
        let baseFee = 20000 // Base fee m·∫∑c ƒë·ªãnh
        
        // 1. Ph√≠ theo t·ªânh (distance fee)
        let provinceFee = 0
        if (selectedProvince.value === 202) {
          // TP.HCM ‚Üí trong th√†nh ph·ªë
          provinceFee = 0
        } else if (selectedProvince.value === 201) {
          // H√† N·ªôi ‚Üí xa
          provinceFee = 30000
        } else if (selectedProvince.value === 203) {
          // ƒê√† N·∫µng ‚Üí r·∫•t xa
          provinceFee = 40000
        } else if (selectedProvince.value === 204) {
          // C·∫ßn Th∆° ‚Üí xa v·ª´a
          provinceFee = 25000
        }
        
        // 2. Ph√≠ theo qu·∫≠n (zone fee)
        let districtFee = 0
        if (selectedDistrict.value === 1542) {
          // Qu·∫≠n 1 - n·ªôi th√†nh
          districtFee = 0
        } else if (selectedDistrict.value === 3695) {
          // Th·ªß ƒê·ª©c - xa h∆°n
          districtFee = 10000
        } else if (selectedDistrict.value === 1443 || selectedDistrict.value === 1462) {
          // Qu·∫≠n 3, 10 - trung t√¢m
          districtFee = 5000
        } else {
          // Qu·∫≠n kh√°c
          districtFee = 8000
        }
        
        // 3. Ph√≠ theo tr·ªçng l∆∞·ª£ng
        const weightFee = Math.ceil(totalWeight / 1000) * 5000 // 5k m·ªói kg
        
        // 4. Ph√≠ b·∫£o hi·ªÉm
        const insuranceFee = insuranceValue > 3000000 ? Math.ceil(insuranceValue * 0.005) : 0
        
        // üéØ T·ªîNG PH√ç = Base + Province + District + Weight + Insurance
        const totalFee = baseFee + provinceFee + districtFee + weightFee + insuranceFee
        
        shippingFee.value = totalFee
        
        // Th·ªùi gian giao h√†ng ph·ª• thu·ªôc v√†o kho·∫£ng c√°ch
        let daysToDeliver = 2 // Default
        if (selectedProvince.value === 202) {
          daysToDeliver = 1 // TP.HCM: 1 ng√†y
        } else if (selectedProvince.value === 201 || selectedProvince.value === 203) {
          daysToDeliver = 3 // H√† N·ªôi, ƒê√† N·∫µng: 3 ng√†y
        } else {
          daysToDeliver = 2 // Kh√°c: 2 ng√†y
        }
        
        expectedDeliveryTime.value = new Date(Date.now() + daysToDeliver * 24 * 60 * 60 * 1000).toISOString()
        
        console.log('‚úÖ [MOCK] Calculated shipping fee:', {
          province: selectedProvince.value,
          district: selectedDistrict.value,
          totalWeight,
          insuranceValue,
          breakdown: {
            baseFee,
            provinceFee,
            districtFee,
            weightFee,
            insuranceFee
          },
          totalFee,
          daysToDeliver
        })
        
        return {
          success: true,
          shippingFee: totalFee,
          expectedDeliveryTime: expectedDeliveryTime.value,
          message: 'T√≠nh ph√≠ v·∫≠n chuy·ªÉn th√†nh c√¥ng (mock)'
        }
      }

      // Real API call
      const response = await shippingService.calculateShippingFee({
        toDistrictId: selectedDistrict.value,
        toWardCode: selectedWard.value,
        totalWeight,
        insuranceValue,
        serviceId: effectiveServiceId,
      })

      if (response.success) {
        shippingFee.value = response.shippingFee || 0
        expectedDeliveryTime.value = response.expectedDeliveryTime || null
        return response
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t√≠nh ph√≠ v·∫≠n chuy·ªÉn')
      }
    } catch (error) {
      errors.calculating = error.message
      console.error('Error calculating shipping fee:', error)
      throw error
    } finally {
      loading.calculating = false
    }
  }

  /**
   * T√≠nh ph√≠ v·∫≠n chuy·ªÉn chi ti·∫øt (c√≥ k√≠ch th∆∞·ªõc)
   * @param {Object} params - Th√¥ng tin chi ti·∫øt
   */
  const calculateShippingFeeFull = async (params) => {
    if (!selectedDistrict.value || !selectedWard.value) {
      errors.calculating = 'Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ giao h√†ng'
      return null
    }

    loading.calculating = true
    errors.calculating = null

    try {
      const response = await shippingService.calculateShippingFeeFull({
        ...params,
        toDistrictId: selectedDistrict.value,
        toWardCode: selectedWard.value,
        serviceId: params.serviceId || selectedService.value,
      })

      if (response.success) {
        shippingFee.value = response.shippingFee || 0
        expectedDeliveryTime.value = response.expectedDeliveryTime || null
        return response
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t√≠nh ph√≠ v·∫≠n chuy·ªÉn')
      }
    } catch (error) {
      errors.calculating = error.message
      console.error('Error calculating full shipping fee:', error)
      throw error
    } finally {
      loading.calculating = false
    }
  }

  /**
   * Reset t·∫•t c·∫£ state
   */
  const reset = () => {
    provinces.value = []
    districts.value = []
    wards.value = []
    services.value = []
    selectedProvince.value = null
    selectedDistrict.value = null
    selectedWard.value = null
    selectedService.value = null
    shippingFee.value = 0
    expectedDeliveryTime.value = null

    Object.keys(loading).forEach((key) => {
      loading[key] = false
    })
    Object.keys(errors).forEach((key) => {
      errors[key] = null
    })
  }

  /**
   * Reset ph√≠ v·∫≠n chuy·ªÉn
   */
  const resetFee = () => {
    shippingFee.value = 0
    expectedDeliveryTime.value = null
    errors.calculating = null
  }

  /**
   * Set ƒë·ªãa ch·ªâ t·ª´ object
   * @param {Object} address - ƒê·ªãa ch·ªâ
   */
  const setAddress = async (address) => {
    if (address.provinceId) {
      selectedProvince.value = address.provinceId
      await loadDistricts(address.provinceId)
    }

    if (address.districtId) {
      selectedDistrict.value = address.districtId
      await loadWards(address.districtId)
      await loadServices(address.districtId)
    }

    if (address.wardCode) {
      selectedWard.value = address.wardCode
    }
  }

  /**
   * Get ƒë·ªãa ch·ªâ hi·ªán t·∫°i
   * @returns {Object} ƒê·ªãa ch·ªâ
   */
  const getAddress = () => {
    return {
      provinceId: selectedProvince.value,
      districtId: selectedDistrict.value,
      wardCode: selectedWard.value,
      provinceName: provinces.value.find((p) => p.ProvinceID === selectedProvince.value)
        ?.ProvinceName,
      districtName: districts.value.find((d) => d.DistrictID === selectedDistrict.value)
        ?.DistrictName,
      wardName: wards.value.find((w) => w.WardCode === selectedWard.value)?.WardName,
    }
  }

  /**
   * Validate ƒë·ªãa ch·ªâ
   * @param {Object} address - ƒê·ªãa ch·ªâ c·∫ßn validate
   * @returns {Object} { valid: boolean, errors: Array }
   */
  const validateAddress = (address) => {
    return shippingService.validateAddress(address)
  }

  return {
    // State
    provinces,
    districts,
    wards,
    services,
    selectedProvince,
    selectedDistrict,
    selectedWard,
    selectedService,
    shippingFee,
    expectedDeliveryTime,
    loading,
    errors,

    // Computed
    hasSelectedAddress,
    canCalculateFee,
    formattedShippingFee,

    // Methods
    loadProvinces,
    loadDistricts,
    loadWards,
    loadServices,
    calculateShippingFee,
    calculateShippingFeeFull,
    reset,
    resetFee,
    setAddress,
    getAddress,
    validateAddress,

    // Service methods (pass-through)
    formatCurrency: shippingService.formatCurrency,
    formatWeight: shippingService.formatWeight,
    getServiceName: shippingService.getServiceName,
    SERVICE_IDS: shippingService.SERVICE_IDS,
  }
}
